Below is a rewritten and detailed prompt for Replit Assistant to help you refactor and enhance the Telegram bot (bot.py) using the aiogram library, while ensuring compatibility with the provided configuration.py and database.py, and incorporating the specified features for a product and service catalog in the radio frequency and telecommunications domain. The prompt is structured to be clear, comprehensive, and precise to guide the assistant in generating a complete and functional bot.
Prompt for Replit Assistant
Project Name: RFCBot
Objective: Refactor and enhance the Telegram bot (bot.py) to serve as a comprehensive product and service catalog for a store specializing in radio frequency and telecommunication devices. The bot must be written using the aiogram library, integrate with the existing configuration.py and database.py modules, and read data from the database as per the provided SQL schema (schema.sql). The bot should display products and services hierarchically, support price inquiries, and include additional features such as educational content, search, and an admin panel.
Project Context
Existing Files:
bot.py: The main bot file to be refactored using aiogram.
configuration.py: Contains configuration variables like BOT_TOKEN, ADMIN_ID, and DATA_DIR.
database.py: Handles database operations (assumed to include methods like get_products, get_services, add_inquiry, etc.).
schema.sql: Defines the database schema (assumed to include tables for products, services, categories, inquiries, educational content, etc.).
handlers.py (optional): If present, contains handler functions; otherwise, implement handlers in bot.py.
Database Schema: The database schema is provided in a separate text file (schema.sql) and includes tables for:
Product categories (4-level hierarchy).
Products (with details like name, description, price, image).
Service categories (3-level hierarchy).
Services (with details like name, description).
Inquiries (for price inquiries with name, phone, description).
Educational content (articles or guides).
Static content (e.g., contact info, about us).
Goal: Rewrite bot.py to use aiogram instead of python-telegram-bot, ensuring the bot:
Displays products and services in a hierarchical structure.
Supports price inquiries with data stored in the database.
Includes features like search, educational content, and an admin panel.
Uses Persian text for the user interface.
Integrates seamlessly with configuration.py and database.py.
Bot Features and Requirements
Hierarchical Product Catalog:
Products are organized in a 4-level category hierarchy, e.g.:
Products > Radio Frequency Devices > Oscilloscopes > HP PPU400 Oscilloscope.
Each product has attributes: name, description, price (optional), and image (optional).
Users can navigate categories via inline keyboards and view product details.
Each product has a "Price Inquiry" button to request a quote.
Hierarchical Service Catalog:
Services are organized in a 3-level category hierarchy, e.g.:
Services > Testing & Repair of RF Devices > Oscilloscope Repair > Major Repair of HP PPU400 Oscilloscope.
Each service has attributes: name, description.
Users can navigate service categories and view details.
Each service has a "Price Inquiry" button.
Price Inquiry System:
Users can request a price quote for products or services by providing:
Name and surname.
Phone number.
Optional description.
Inquiry data is stored in the database (table: inquiries).
The process is implemented as a conversation with steps:
Step 1: Ask for name (INQUIRY_NAME).
Step 2: Ask for phone number (INQUIRY_PHONE).
Step 3: Ask for optional description (INQUIRY_DESC).
Completion: Save inquiry and notify the user.
Users can cancel the inquiry at any step using a /cancel command or "Cancel" button.
Search Functionality:
Users can search for products or services by entering a query.
Search results display matching products/services with a "View Details" button.
If no results are found, display: "موردی یافت نشد."
Educational Content:
Display categorized educational content (e.g., articles, guides) stored in the database.
Users can browse content via inline keyboards.
Content includes title, description, and optional media (e.g., images).
Static Pages:
Contact Us: Display contact information (default: "با ما از طریق شماره 1234567890+ یا ایمیل info@example.com در تماس باشید.").
About Us: Display company information (default: "ما یک شرکت فعال در زمینه تجهیزات الکترونیکی هستیم.").
Admin Panel:
Accessible only to users with ADMIN_ID (from configuration.py).
Features:
Add/edit/delete product categories and products.
Add/edit/delete service categories and services.
Add/edit/delete educational content.
View and manage inquiries.
Import data via CSV files (for products/services).
Displayed as a menu with options like:
Edit Categories
Edit Products
Edit Services
Edit Educational Content
View Inquiries
Import CSV
User Interface:
All text is in Persian (Farsi).
Main menu includes buttons:
"محصولات 📦" (Products)
"خدمات 🛠" (Services)
"استعلام قیمت 💸" (Price Inquiry)
"مطالب آموزشی 📚" (Educational Content)
"تماس با ما 📞" (Contact Us)
"درباره ما ℹ️" (About Us)
"جستجو 🔍" (Search)
"پنل ادمین 🔧" (Admin Panel, visible only to admins)
Navigation includes a "بازگشت ↩️" (Back) button to return to the previous menu.
Constants (to be used in the code):
python
# Callback data prefixes
PRODUCT_PREFIX = "product_"
SERVICE_PREFIX = "service_"
CATEGORY_PREFIX = "category_"
BACK_PREFIX = "back_"
INQUIRY_PREFIX = "inquiry_"
EDUCATION_PREFIX = "edu_"
ADMIN_PREFIX = "admin_"

# Button texts (Persian)
PRODUCTS_BTN = "محصولات 📦"
SERVICES_BTN = "خدمات 🛠"
INQUIRY_BTN = "استعلام قیمت 💸"
EDUCATION_BTN = "مطالب آموزشی 📚"
CONTACT_BTN = "تماس با ما 📞"
ABOUT_BTN = "درباره ما ℹ️"
BACK_BTN = "بازگشت ↩️"
SEARCH_BTN = "جستجو 🔍"
ADMIN_BTN = "پنل ادمین 🔧"

# Persian text constants
START_TEXT = """به ربات جامع محصولات و خدمات خوش آمدید! این ربات امکانات زیر را در اختیار شما قرار می‌دهد:
محصولات:
• مشاهده محصولات در دسته‌بندی‌های مختلف
• جزئیات کامل هر محصول شامل قیمت و توضیحات
• امکان مشاهده تصاویر محصولات
خدمات:
• دسترسی به لیست خدمات قابل ارائه
• اطلاعات کامل هر خدمت و شرایط ارائه
• امکان استعلام قیمت مستقیم
استعلام قیمت:
• درخواست استعلام قیمت برای محصولات و خدمات
• فرم ساده و سریع برای ثبت درخواست
• پیگیری آسان درخواست‌ها
مطالب آموزشی:
• دسترسی به محتوای آموزشی دسته‌بندی شده
• مقالات و راهنماهای کاربردی
• به‌روزرسانی مستمر محتوا
امکانات دیگر:
• جستجو در محصولات و خدمات
• تماس مستقیم با پشتیبانی
• اطلاعات تماس و درباره ما
لطفاً از منوی زیر بخش مورد نظر خود را انتخاب کنید:"""
NOT_FOUND_TEXT = "موردی یافت نشد."
CONTACT_DEFAULT = "با ما از طریق شماره 1234567890+ یا ایمیل info@example.com در تماس باشید."
ABOUT_DEFAULT = "ما یک شرکت فعال در زمینه تجهیزات الکترونیکی هستیم."
INQUIRY_START = "لطفاً فرم استعلام قیمت را کامل کنید. نام خود را وارد کنید:"
INQUIRY_PHONE = "لطفاً شماره تماس خود را وارد کنید:"
INQUIRY_DESC = "لطفاً توضیحات بیشتر را وارد کنید (اختیاری):"
INQUIRY_COMPLETE = "استعلام قیمت شما با موفقیت ثبت شد. به زودی با شما تماس خواهیم گرفت."
ADMIN_WELCOME = "به پنل مدیریت خوش آمدید. لطفاً یکی از گزینه‌های زیر را انتخاب کنید:"
ADMIN_ACCESS_DENIED = "شما دسترسی به پنل مدیریت ندارید."
SEARCH_PROMPT = "لطفاً عبارت جستجو را وارد کنید:"
ERROR_MESSAGE = "خطایی رخ داد. لطفاً دوباره تلاش کنید."
Technical Requirements:
Use aiogram for bot development.
Integrate with configuration.py for variables like BOT_TOKEN, ADMIN_ID, DATA_DIR.
Use database.py for all database operations (assume methods like get_categories, get_products, add_inquiry, etc., exist or need to be defined).
Store uploaded files (e.g., product images, CSV files) in DATA_DIR.
Implement conversation states for:
Price inquiries (INQUIRY_NAME, INQUIRY_PHONE, INQUIRY_DESC).
Admin actions (e.g., ADMIN_EDIT_CAT, ADMIN_EDIT_PRODUCT, ADMIN_UPLOAD_CSV).
Search (SEARCH_STATE).
Use inline keyboards for navigation and callback queries with prefixes (e.g., product_, service_, back_).
Ensure proper error handling and logging using the logging module.
Support Persian text encoding (utf-8).
Tasks for Replit Assistant
Refactor bot.py:
Rewrite the existing bot.py (originally using python-telegram-bot) to use aiogram.
Implement the main bot logic in bot.py, including:
Bot initialization with BOT_TOKEN from configuration.py.
Command handlers for /start, /admin, /cancel.
Message handlers for text input (e.g., search queries, inquiry responses).
Callback query handlers for inline keyboard navigation (products, services, back buttons, etc.).
Conversation handlers for price inquiries, admin actions, and search.
Ensure compatibility with configuration.py and database.py.
Implement Handlers:
If handlers.py exists, refactor it to work with aiogram. Otherwise, implement handlers in bot.py.
Handlers should include:
Start Handler: Display START_TEXT with the main menu (inline keyboard).
Product Handler: Navigate 4-level product categories and display product details.
Service Handler: Navigate 3-level service categories and display service details.
Inquiry Handler: Manage the price inquiry conversation (name, phone, description).
Search Handler: Process search queries and display results.
Education Handler: Display educational content.
Static Content Handler: Display contact and about us pages.
Admin Handler: Manage admin panel features (restricted to ADMIN_ID).
Database Integration:
Use database.py for all data operations.
Assume or implement methods like:
get_categories(type, parent_id): Fetch product/service categories.
get_products(category_id): Fetch products in a category.
get_services(category_id): Fetch services in a category.
get_product(product_id): Fetch product details.
get_service(service_id): Fetch service details.
add_inquiry(user_id, name, phone, description, item_type, item_id): Save inquiry.
get_edu_content(category_id): Fetch educational content.
add_category(type, name, parent_id): Add product/service category (admin).
add_product(category_id, name, description, price, image): Add product (admin).
add_service(category_id, name, description): Add service (admin).
import_csv(file_path, type): Import products/services from CSV (admin).
Ensure queries align with the provided schema.sql.
File Handling:
Store uploaded files (e.g., product images, CSV files) in DATA_DIR (from configuration.py).
Create DATA_DIR if it doesn’t exist using os.makedirs(DATA_DIR, exist_ok=True).
Error Handling and Logging:
Use the logging module for debugging and error tracking.
Log key events (e.g., bot start, inquiry submission, admin actions).
Handle errors gracefully and display ERROR_MESSAGE to users when needed.
Conversation States:
Define states for conversations:
python
INQUIRY_NAME = "inquiry_name"
INQUIRY_PHONE = "inquiry_phone"
INQUIRY_DESC = "inquiry_desc"
SEARCH_STATE = "search"
ADMIN_EDIT_CAT = "admin_edit_cat"
ADMIN_EDIT_PRODUCT = "admin_edit_product"
ADMIN_EDIT_SERVICE = "admin_edit_service"
ADMIN_EDIT_EDU = "admin_edit_edu"
ADMIN_UPLOAD_CSV = "admin_upload_csv"
Implement conversation flows using aiogram's FSMContext.
Inline Keyboards:
Use inline keyboards for navigation with callback data prefixes (e.g., product_123, category_456, back_parent_789).
Ensure each menu includes a "Back" button (BACK_BTN) to return to the previous level.
Example keyboard for product categories:
python
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
def get_category_keyboard(categories, parent_id):
    keyboard = InlineKeyboardMarkup()
    for cat in categories:
        keyboard.add(InlineKeyboardButton(cat["name"], callback_data=f"{CATEGORY_PREFIX}{cat['id']}"))
    if parent_id:
        keyboard.add(InlineKeyboardButton(BACK_BTN, callback_data=f"{BACK_PREFIX}{parent_id}"))
    return keyboard
Admin Panel:
Restrict access to users with ADMIN_ID.
Implement a menu with options for:
Adding/editing/deleting categories (products/services).
Adding/editing/deleting products/services.
Adding/editing educational content.
Viewing inquiries.
Importing data via CSV.
Use conversation states for admin actions (e.g., ADMIN_EDIT_PRODUCT for editing product details).
Search Implementation:
Allow users to search by clicking the "جستجو 🔍" button and entering a query.
Query the database for matching products/services (e.g., using LIKE in SQL).
Display results with inline buttons to view details.
Testing and Validation:
Ensure the bot handles Persian text correctly (utf-8 encoding).
Test all features: product/service navigation, inquiries, search, admin panel, etc.
Validate database operations against schema.sql.
Handle edge cases (e.g., empty categories, invalid inputs, unauthorized admin access).
Expected Output
A fully functional bot.py file written with aiogram.
Updated or new handlers.py (if needed) with handler functions.
Proper integration with configuration.py and database.py.
Support for all specified features (product/service catalogs, inquiries, search, admin panel, etc.).
Persian user interface with inline keyboards and conversation flows.
Error handling and logging for robustness.
Additional Notes
If any database methods are missing in database.py, suggest implementations based on schema.sql.
If handlers.py does not exist, include all handler logic in bot.py or create a new handlers.py.
Ensure the bot is deployable on Replit (e.g., include .env support for BOT_TOKEN).
Provide comments in the code to explain key sections.
If any clarification is needed (e.g., specific database methods, schema details), assume reasonable defaults and document assumptions.
Example Code Structure for bot.py (to guide the assistant):
python
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# Import local modules
from configuration import BOT_TOKEN, ADMIN_ID, DATA_DIR
from database import Database

# Constants (as provided)
PRODUCT_PREFIX = "product_"
SERVICE_PREFIX = "service_"
# ... (other constants)

# Conversation states
class InquiryStates(StatesGroup):
    INQUIRY_NAME = State()
    INQUIRY_PHONE = State()
    INQUIRY_DESC = State()

class SearchStates(StatesGroup):
    SEARCH_STATE = State()

class AdminStates(StatesGroup):
    ADMIN_EDIT_CAT = State()
    # ... (other admin states)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Initialize database
db = Database()

# Create data directory
os.makedirs(DATA_DIR, exist_ok=True)

# Handlers
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(PRODUCTS_BTN, callback_data=f"{CATEGORY_PREFIX}product_root"))
    keyboard.add(InlineKeyboardButton(SERVICES_BTN, callback_data=f"{CATEGORY_PREFIX}service_root"))
    # ... (other buttons)
    await message.answer(START_TEXT, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith(CATEGORY_PREFIX))
async def handle_category(callback: types.CallbackQuery):
    category_id = callback.data[len(CATEGORY_PREFIX):]
    # Fetch subcategories or items from database
    # Display keyboard with categories/items and back button
    await callback.message.edit_text("انتخاب دسته‌بندی:", reply_markup=get_category_keyboard(categories, parent_id))

# ... (other handlers for inquiries, search, admin, etc.)

async def on_startup(_):
    logger.info("Bot started")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
Please provide the following if available:
Content of schema.sql to ensure accurate database integration.
Details of database.py methods (if specific methods are implemented).
Any additional files (e.g., handlers.py) or dependencies.
Start implementing the bot based on this prompt, and let me know if you need further clarification!
This prompt is designed to be precise and comprehensive, guiding the Replit Assistant to produce a functional Telegram bot with all the requested features. Let me know if you need further refinements or additional details!